// // Задание 1
// // • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// // • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

// // {
// // title: "Название альбома",
// // artist: "Исполнитель",
// // year: "Год выпуска"
// // }

// // • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// // • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

// // Задание 1 - Реализация:
// const musicCollection = [
//     { title: "The Dark Side of the Moon", artist: "Pink Floyd", year: "1973" },
//     { title: "Thriller", artist: "Майкл Джексон", year: "1982" },
//     { title: "Abbey Road", artist: "The Beatles", year: "1969" },
// ];

// musicCollection[Symbol.iterator] = function () {
//     return {
//         current: 0,
//         to: this.length,
//         next() {
//             return this.current < this.to
//                 ? { done: false, value: musicCollection[this.current++] }
//                 : { done: true };
//         }
//     }
// }

// for (let vinyl of musicCollection) {
//     console.log(`Название альбома: ${vinyl.title}, Исполнитель: ${vinyl.artist}, Год выпуска: ${vinyl.year}`);
// }

// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах.Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента.В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
//     Ольга - специализация: Суши.
//         Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
//     Пицца "Пепперони" - повар: Виктор.
//         Суши "Филадельфия" - повар: Ольга.
//             Суши "Калифорния" - повар: Ольга.
//                 Тирамису - повар: Дмитрий.
//                     Чизкейк - повар: Дмитрий.

//                         Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

// Задание 2 - Реализация:

// Создание Map для хранения блюд и их поваров
const dishesToChefs = new Map();
dishesToChefs.set('Пицца "Маргарита"', 'Виктор');
dishesToChefs.set('Пицца "Пепперони"', 'Виктор');
dishesToChefs.set('Суши "Филадельфия"', 'Ольга');
dishesToChefs.set('Суши "Калифорния"', 'Ольга');
dishesToChefs.set('Тирамису', 'Дмитрий');
dishesToChefs.set('Чизкейк', 'Дмитрий');

// Создание Map для хранения заказов каждого клиента
const customerOrders = new Map();

// Создание Map для хранения блюд, приготовленных каждым поваром
const chefsDishesPrepared = new Map();

// Объекты для клиентов
const alexey = { name: 'Алексей' };
const maria = { name: 'Мария' };
const irina = { name: 'Ирина' };

// Заказы
const alexeyOrder = new Set(['Пицца "Пепперони"', 'Тирамису']);
customerOrders.set(alexey, alexeyOrder);

const mariaOrder = new Set(['Суши "Калифорния"', 'Пицца "Маргарита"']);
customerOrders.set(maria, mariaOrder);

const irinaOrder = new Set(['Чизкейк']);
customerOrders.set(irina, irinaOrder);

// Отслеживание заказов и поваров
console.log('Заказы (клиент, блюдо, повар):');
console.log('');
for (const [customer, order] of customerOrders) {
    console.log(`Заказ клиента: ${customer.name}`);
    for (const dish of order) {
        const chef = dishesToChefs.get(dish);
        console.log(`  ${dish}, готовит повар ${chef}`);

        // Добавление блюда в Map для повара
        if (chefsDishesPrepared.has(chef)) {
            chefsDishesPrepared.get(chef).add(dish);
        } else {
            chefsDishesPrepared.set(chef, new Set([dish]));
        }
    }
    console.log('');
}

// Вывод блюд, приготовленных каждым поваром
console.log('Блюда, приготовленные каждым поваром:');
console.log('');
for (const [chef, dishesPrepared] of chefsDishesPrepared) {
    console.log(`Повар ${chef} приготовил(а):`);
    for (const dish of dishesPrepared) {
        console.log(`  ${dish}`);
    }
    console.log('');
}

// // В консоли:
// Заказы (клиент, блюдо, повар):
// Заказ клиента: Алексей
//     Пицца "Пепперони" готовит повар Виктор
//     Тирамису готовит повар Дмитрий

// Заказ клиента: Мария
//     Суши "Калифорния" готовит повар Ольга
//     Пицца "Маргарита" готовит повар Виктор

// Заказ клиента: Ирина
//     Чизкейк готовит повар Дмитрий

// Блюда, приготовленные каждым поваром:

// Повар Виктор приготовил:
//     Пицца "Пепперони"
//     Пицца "Маргарита"

// Повар Дмитрий приготовил:
//     Тирамису
//     Чизкейк

// Повар Ольга приготовил:
//     Суши "Калифорния"